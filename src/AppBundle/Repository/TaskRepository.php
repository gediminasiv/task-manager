<?php

namespace AppBundle\Repository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUserTasks($userId)
    {
        $query = $this->createQueryBuilder('t')
            ->leftJoin('t.project', 'p')
            ->leftJoin('p.client', 'c')
            ->where('t.user = :user')
            ->andWhere('t.archived = :archived')
            ->andWhere('t.status != 3')
            ->addOrderBy('t.id', 'DESC')
            ->setParameter('user', $userId)
            ->setParameter('archived', false);

        return $query->getQuery()->getResult();
    }

    public function findTasksByDateAndUser($from, $to, $userId)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.created >= :from')
            ->andWhere('t.user = :userId')
            ->andWhere('t.created <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->setParameter('userId', $userId);

        return $query->getQuery()->getResult();
    }


    public function findTasksByDateAndProject($from, $to, $projectId)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.created >= :from')
            ->andWhere('t.project = :projectId')
            ->andWhere('t.created <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->setParameter('projectId', $projectId);

        return $query->getQuery()->getResult();
    }


    public function findTasksByDateAndClient($from, $to, $clientId)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.created >= :from')
            ->andWhere('t.client = :clientId')
            ->andWhere('t.created <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->setParameter('clientId', $clientId);

        return $query->getQuery()->getResult();
    }

    public function findTotalDistance()
    {
        $query = $this->createQueryBuilder('t')
            ->select('SUM(t.distance) AS distance')
            ->where('t.status = 3');

        return $query->getQuery()->getSingleResult();
    }

    public function findUsersForReport($user)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.status = 3')
            ->andWhere('t.user = :user')
            ->setParameter('user', $user);

        $result = $query->getQuery()->getResult();

        $resultArray = [
            'firstName' => $user->getFirstName(),
            'lastName' => $user->getLastName(),
            'distance' => 0,
            'seconds' => 0
        ];

        foreach ($result as $resultRow) {
            $resultArray['distance'] += $resultRow->getDistance();
            $seconds = strtotime($resultRow->getDepartureTime()->format('Y-m-d H:i:s')) - strtotime($resultRow->getArrivalTime()->format('Y-m-d H:i:s'));
            $resultArray['seconds'] += $seconds;
        }

        return $resultArray;
    }

    public function getTasksByDate($from, $to)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.plannedTime >= :from')
            ->andWhere('t.plannedTime <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->getQuery()
            ->getResult();

        $query2 = $this->createQueryBuilder('t')
            ->where('t.arrivalTime >= :from')
            ->andWhere('t.arrivalTime <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->getQuery()
            ->getResult();

        $query3 = $this->createQueryBuilder('t')
            ->where('t.departureTime >= :from')
            ->andWhere('t.departureTime <= :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->getQuery()
            ->getResult();


        $query = array_merge($query, $query2, $query3);

        return $query;
    }
}
